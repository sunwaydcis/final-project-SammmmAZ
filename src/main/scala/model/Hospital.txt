// class information for Buildings

// val members
// val ImageData
// val Point X
// val Point Y
// val Cost
// var ProduceMoney
// var ProductionRate
// var level
// var available_Levels
// var upgrade_price

// Logic to build a building
// initiate a Building object
// method to level up
// method to consume

// Hospital Extends Buildings

// load Building constructor

// define static member
// Image value = HospitalImage // passed to Image constructor


  override def Build(loc : Set[(Int,Int)], city: City): Unit =
    // check for city's current method
    // logic of adding Hospital should be implemented in City Class
    val current_city : City = city
    val urban_tiles : ListBuffer[(Int,Int)] = current_city.urbanTilePoints
    val suburban_tiles : ListBuffer[(Int,Int)] = current_city.suburbanTilePoints
    val rural_tiles : ListBuffer[(Int,Int)] = current_city.ruralTilePoints
    // compile a logic to prefer to build in urban more than suburban and rural
    for ((x,y) <- loc)
      // iterate through each points
      // if x & y is a good tile
      // and in an urban area
      (x,y) match
        // for the first hospital
        case (x,y) if current_city.hospitalCount == 0 && current_city.hospitalCount < 4 && urban_tiles.length >= 100 && IsBuildable(funds = Population.totalMoney, city = current_city) =>
          Some(Hospital(pointX = x, pointY = y))
          // logic to add
          // 1. remove (x,y) from urban tile/ suburban tile
          // 2. add (x,y) to Building tiles of city object
          // 3. deduct money from Population.total_money -->
          // 4.
          println(f"Hospital built at $x,$y")
        // for the second hospital and third hospital
        case (x,y) if suburban_tiles.contains((x,y)) &&  current_city.hospitalCount < 4 && suburban_tiles.length >= 200 && urban_tiles.length - 100 >= 200 && IsBuildable(funds = Population.totalMoney , city = current_city) =>
          Some(Hospital(pointX = x, pointY = y))
          println(f"Hospital built at $x,$y")
        case (x,y) if rural_tiles.contains((x,y)) && current_city.hospitalCount < 4 && suburban_tiles.length - 200 >= 400 && rural_tiles.length >= 100 &&  IsBuildable(funds = Population.totalMoney , city = current_city) =>
          Some(Hospital(pointX = x, pointY = y))
          println("___")

    end for
  end Build


----------------------------------

package controller

import javafx.fxml.FXML
import javafx.scene.control.ScrollPane
import model.BiomeMap

class MapPaneController:

  // Link the ScrollPane from FXML
  @FXML private var mapScrollPane: ScrollPane = _

  // Initialize method called automatically after FXML is loaded
  @FXML def initialize(): Unit =
    // Generate the map from BiomeMap model
    val biomeMapScrollPane = BiomeMap.GenerateBiomeMap()

    // Set the generated map as the content of the ScrollPane
    mapScrollPane.setContent(biomeMapScrollPane.getContent)

end MapPaneController


